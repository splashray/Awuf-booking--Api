{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Rave-Booking API",
    "description": "Documentation for Rave-Boking automatically generated </b> module."
  },
  "host": "localhost:3000",
  "basePath": "/",
  "tags": [
    {
      "name": "Auth",
      "description": "Authentication Endpoints"
    },
    {
      "name": "Hotels",
      "description": "Hotels Endpoints"
    },
    {
      "name": "Users",
      "description": "Users Endpoints"
    },
    {
      "name": "Users/Admin",
      "description": "Users/Admin Endpoints"
    },
    {
      "name": "Admin",
      "description": "Admin Endpoints"
    },
    {
      "name": "Owners",
      "description": "Owners Endpoints"
    },
    {
      "name": "Kyc",
      "description": "KYC Endpoints"
    },
    {
      "name": "Rooms",
      "description": "Roooms Endpoints"
    },
    {
      "name": "Bookings",
      "description": "Bookings Endpoints"
    },
    {
      "name": "Review",
      "description": "Reviews Endpoints"
    }
  ],
  "schemes": [
    "https"
  ],
  "securityDefinitions": {
    "bearerAuth": {
      "type": "apiKey",
      "name": "Authorization",
      "scheme": "bearer",
      "in": "header"
    }
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/": {
      "get": {
        "description": "",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/auth/owner/register/check": {
      "post": {
        "tags": [
          "Auth"
        ],
        "description": "Endpoint to Check Owner",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "password": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/auth/owner/sendOwnerOtp/{ownerId}": {
      "get": {
        "tags": [
          "Auth"
        ],
        "description": "Endpoint to send Owner",
        "parameters": [
          {
            "name": "ownerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "example": "test-user@mail.com"
                }
              },
              "required": [
                "email"
              ]
            }
          },
          {
            "name": "path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string",
                  "example": "42e2a46a-e56f-4e4d-be0e-0675b7026f58"
                }
              },
              "required": [
                "token"
              ]
            }
          }
        ],
        "responses": {}
      }
    },
    "/api/auth/owner/ownerVerification": {
      "post": {
        "tags": [
          "Auth"
        ],
        "description": "Endpoint to Verify Owner",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "example": "test-user@mail.com"
                }
              },
              "required": [
                "email"
              ]
            }
          },
          {
            "name": "path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string",
                  "example": "42e2a46a-e56f-4e4d-be0e-0675b7026f58"
                }
              },
              "required": [
                "token"
              ]
            }
          }
        ],
        "responses": {}
      }
    },
    "/api/auth/owner/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "description": "Endpoint to Register Owner",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "example": "any"
                },
                "password": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/auth/owner/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "description": "Endpoint to Login Owner",
        "parameters": [],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/auth/user/register/check": {
      "post": {
        "tags": [
          "Auth"
        ],
        "description": "Endpoint to Check User",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "password": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/auth/user/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "description": "Endpoint to Register User",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "example": "any"
                },
                "password": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/auth/user/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "description": "Endpoint to Login User",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/api/auth/forgotpassword": {
      "post": {
        "tags": [
          "Auth"
        ],
        "description": "Endpoint for forgot password",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "example": "test-user@mail.com"
                }
              },
              "required": [
                "email"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/auth/changepassword/{token}": {
      "post": {
        "tags": [
          "Auth"
        ],
        "description": "Endpoint for change password",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string",
                  "example": "42e2a46a-e56f-4e4d-be0e-0675b7026f58"
                }
              },
              "required": [
                "token"
              ]
            }
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "in": {
                  "example": "any"
                },
                "required": {
                  "example": "any"
                },
                "schema": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/api/owners/{id}": {
      "put": {
        "tags": [
          "Owners"
        ],
        "description": "Endpoint to update Owner",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "Owners"
        ],
        "description": "Endpoint to Delete a Owner",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "Owners"
        ],
        "description": "Endpoint to Get a Owner",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/owners/pass/{id}": {
      "put": {
        "tags": [
          "Owners"
        ],
        "description": "Endpoint to update Owner",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/owners/": {
      "get": {
        "tags": [
          "Owners"
        ],
        "description": "Endpoint to Get all Owners.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/users/verify/": {
      "get": {
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/users/verify/admin": {
      "get": {
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/users/{id}": {
      "put": {
        "tags": [
          "Users"
        ],
        "description": "Endpoint to update User",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "description": "Endpoint to Delete User.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "Users"
        ],
        "description": "Endpoint to Get a User.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/users/pass/{id}": {
      "put": {
        "tags": [
          "Users"
        ],
        "description": "Endpoint to update User",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/users/": {
      "get": {
        "tags": [
          "Users"
        ],
        "description": "Endpoint to Get all Users.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/hotels/": {
      "post": {
        "tags": [
          "Hotels"
        ],
        "description": "Endpoint to create Hotel.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "get": {
        "tags": [
          "Hotels"
        ],
        "description": "Endpoint to get all Hotels.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/hotels/owners/": {
      "get": {
        "tags": [
          "Hotels"
        ],
        "description": "Endpoint to get Hotels by a specific owner.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/hotels/owners/{hotelid}": {
      "get": {
        "tags": [
          "Hotels"
        ],
        "description": "Endpoint to get a Hotel by an id of a specific owner.",
        "parameters": [
          {
            "name": "hotelid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/hotels/bookable/{id}": {
      "put": {
        "tags": [
          "Hotels"
        ],
        "description": "Endpoint to Update Owners Hotel to Bookable(Admin to update).",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "bookable": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/hotels/edit/{id}": {
      "put": {
        "tags": [
          "Hotels"
        ],
        "description": "Endpoint to Update Hotel.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/hotels/{id}": {
      "put": {
        "tags": [
          "Hotels"
        ],
        "description": "Endpoint to Update(Admin to update) Hotel.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "featured": {
                  "example": "any"
                },
                "verified": {
                  "example": "any"
                },
                "bookable": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "Hotels"
        ],
        "description": "Endpoint to Delete Hotel.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/hotels/find/{id}": {
      "get": {
        "tags": [
          "Hotels"
        ],
        "description": "Endpoint to get a Hotel by id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/hotels/searchresult/{searchInput}": {
      "get": {
        "tags": [
          "Hotels"
        ],
        "description": "Endpoint to get Hotels by search queries.",
        "parameters": [
          {
            "name": "searchInput",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/hotels/searchbyid/{hotelCustomId}": {
      "get": {
        "tags": [
          "Hotels"
        ],
        "description": "Endpoint to get Hotels by search of Id.",
        "parameters": [
          {
            "name": "hotelCustomId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/hotels/room/{id}": {
      "get": {
        "tags": [
          "Rooms"
        ],
        "description": "Endpoint to get Roooms by a specific hotel.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/rooms/owners/all/{hotelid}": {
      "get": {
        "tags": [
          "Rooms"
        ],
        "description": "Endpoint to Get Owner",
        "parameters": [
          {
            "name": "hotelid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/rooms/one/{hotelid}": {
      "post": {
        "tags": [
          "Rooms"
        ],
        "description": "Endpoint to Create a Room.",
        "parameters": [
          {
            "name": "hotelid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/rooms/{id}": {
      "put": {
        "tags": [
          "Rooms"
        ],
        "description": "Endpoint to Update a Room.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "Rooms"
        ],
        "description": "Endpoint to Get a Room.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/rooms/{id}/{hotelid}": {
      "delete": {
        "tags": [
          "Rooms"
        ],
        "description": "Endpoint to Delete(By an Admin) a Room.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "hotelid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/rooms/": {
      "get": {
        "tags": [
          "Rooms"
        ],
        "description": "Endpoint to Get(Get all rooms by Admin) all Rooms.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/rooms/owners/{roomid}/{hotelid}": {
      "get": {
        "tags": [
          "Rooms"
        ],
        "description": "Endpoint to Get Owner",
        "parameters": [
          {
            "name": "roomid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "hotelid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/kycs/{hotelId}": {
      "post": {
        "tags": [
          "Kyc"
        ],
        "description": "Endpoint to create Kyc Details of owner.",
        "parameters": [
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/kycs/{id}": {
      "put": {
        "tags": [
          "Kyc"
        ],
        "description": "Endpoint to update Kyc Details of owner.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "Kyc"
        ],
        "description": "Endpoint to delete (Delete Kyc By Admin) Kyc Details of owner.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "Kyc"
        ],
        "description": "Endpoint to get Kyc Details of owner.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/kycs/failed/{id}": {
      "put": {
        "tags": [
          "Kyc"
        ],
        "description": "Endpoint to update (Failed Kyc By Admin) Kyc Details of owner.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "VerificationMessage": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/kycs/success/{id}": {
      "put": {
        "tags": [
          "Kyc"
        ],
        "description": "Endpoint to update (Success Kyc By Admin) Kyc Details of owner.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "VerificationMessage": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/kycs/admin": {
      "get": {
        "tags": [
          "Kyc"
        ],
        "description": "Endpoint to Get (get All Owner Kyc By Admin) Kyc Details of owner.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/kycs/status/{id}": {
      "get": {
        "tags": [
          "Kyc"
        ],
        "description": "Endpoint to get Kyc Details of owner.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/kycs/admin/{id}": {
      "get": {
        "tags": [
          "Kyc"
        ],
        "description": "Endpoint to Get (Get Kyc By Admin) Kyc Details of owner.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/bookings/{hotelId}": {
      "post": {
        "tags": [
          "Bookings"
        ],
        "description": "Endpoint to create booking.",
        "parameters": [
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "paymentType": {
                  "example": "any"
                },
                "price": {
                  "example": "any"
                },
                "email": {
                  "example": "any"
                },
                "noOfRooms": {
                  "example": "any"
                },
                "nightsNumber": {
                  "example": "any"
                },
                "checkIn": {
                  "example": "any"
                },
                "checkOut": {
                  "example": "any"
                },
                "guestCount": {
                  "example": "any"
                },
                "oneRoom": {
                  "example": "any"
                },
                "firstName": {
                  "example": "any"
                },
                "lastName": {
                  "example": "any"
                },
                "phoneNumber": {
                  "example": "any"
                },
                "title": {
                  "example": "any"
                },
                "address": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/bookings/paystack/verify": {
      "post": {
        "tags": [
          "Bookings"
        ],
        "description": "Endpoint to Verify payment from paystack with reference.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "reference",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/bookings/paystack/regenerate/{id}": {
      "post": {
        "tags": [
          "Bookings"
        ],
        "description": "Endpoint to Regeneration payment URL.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/bookings/": {
      "get": {
        "tags": [
          "Bookings"
        ],
        "description": "Endpoint to get all booking.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/bookings/usersbooking/{userId}": {
      "get": {
        "tags": [
          "Bookings"
        ],
        "description": "Endpoint to get all users bookings.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/bookings/usersbooking/{userId}/{bookingId}": {
      "get": {
        "tags": [
          "Bookings"
        ],
        "description": "Endpoint to get single user",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "bookingId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/bookings/ownersbooking/{hotelId}": {
      "get": {
        "tags": [
          "Bookings"
        ],
        "description": "Endpoint to get all owner bookings.",
        "parameters": [
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "startDate",
            "in": "query",
            "type": "string"
          },
          {
            "name": "endDate",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/bookings/ownersbooking/{hotelId}/{bookingId}": {
      "get": {
        "tags": [
          "Bookings"
        ],
        "description": "Endpoint to get single owner",
        "parameters": [
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "bookingId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/bookings/getBookingAdmin/{userId}/{bookingId}": {
      "get": {
        "tags": [
          "Bookings"
        ],
        "description": "Endpoint to get a booking by id.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "bookingId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/bookings/actions/{bookingRecordId}/cancel": {
      "put": {
        "tags": [
          "Bookings"
        ],
        "description": "Endpoint to Cancel booking Reservation.",
        "parameters": [
          {
            "name": "bookingRecordId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/bookings/actions/{bookingRecordId}/checkin": {
      "put": {
        "tags": [
          "Bookings"
        ],
        "description": "Endpoint to checkin booking(Commission are calculated).",
        "parameters": [
          {
            "name": "bookingRecordId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/bookings/actions/{bookingRecordId}/checkout": {
      "put": {
        "tags": [
          "Bookings"
        ],
        "description": "Endpoint to checkout booking(Transaction are paid out).",
        "parameters": [
          {
            "name": "bookingRecordId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/bookings/actions/{bookingRecordId}/refund": {
      "put": {
        "tags": [
          "Bookings"
        ],
        "description": "Endpoint to Refund booking Reservation to users.",
        "parameters": [
          {
            "name": "bookingRecordId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/bookings/{bookingId}": {
      "delete": {
        "tags": [
          "Bookings"
        ],
        "description": "Endpoint to Delete booking Reservation especially when error occur during payment.",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/reviews/{bookingid}": {
      "post": {
        "tags": [
          "Review"
        ],
        "description": "Endpoint to create Review for a hotel through booking.",
        "parameters": [
          {
            "name": "bookingid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "fullName": {
                  "example": "any"
                },
                "location": {
                  "example": "any"
                },
                "reviewTitle": {
                  "example": "any"
                },
                "reviewContent": {
                  "example": "any"
                },
                "starRating": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/reviews/general/{hotelId}": {
      "get": {
        "tags": [
          "Review"
        ],
        "description": "Endpoint to get reviews of a particular hotel sorted by date.",
        "parameters": [
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/reviews/usersreview/{userId}/all": {
      "get": {
        "tags": [
          "Review"
        ],
        "description": "Endpoint to Get Reviews of all booking by users.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/reviews/usersreview/{userId}/{reviewid}": {
      "get": {
        "tags": [
          "Review"
        ],
        "description": "Endpoint to Get single Review of booking by users.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "reviewid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/reviews/ownersreview/{hotelid}": {
      "get": {
        "tags": [
          "Review"
        ],
        "description": "Endpoint to Get Reviews of all booking of a particular owner.",
        "parameters": [
          {
            "name": "hotelid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/reviews/ownersreview/{hotelid}/{reviewid}": {
      "get": {
        "tags": [
          "Review"
        ],
        "description": "Endpoint to Get single Review of booking of a particular owner.",
        "parameters": [
          {
            "name": "hotelid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "reviewid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/reviews/adminreview": {
      "get": {
        "tags": [
          "Review"
        ],
        "description": "Endpoint to Get Reviews of all booking by users.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/reviews/adminreview/{reviewid}": {
      "get": {
        "tags": [
          "Review"
        ],
        "description": "Endpoint to Get single Review of booking by users.",
        "parameters": [
          {
            "name": "reviewid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/reviews/{reviewid}": {
      "delete": {
        "tags": [
          "Review"
        ],
        "description": "Endpoint to Delete Review of a booking by users.",
        "parameters": [
          {
            "name": "reviewid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/historys/users/{userId}/payments/csv": {
      "get": {
        "description": "",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/historys/users/{userId}/payments/pdf": {
      "get": {
        "description": "",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {}
      }
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string",
          "example": "John"
        },
        "lastName": {
          "type": "string",
          "example": "John"
        },
        "email": {
          "type": "string",
          "example": "test@gmail.com"
        },
        "phoneNumber": {
          "type": "string",
          "example": "+2349031874139"
        },
        "password": {
          "type": "string",
          "example": "2021"
        },
        "gender": {
          "type": "string",
          "example": "male"
        },
        "title": {
          "type": "string",
          "example": "Mr."
        },
        "address": {
          "type": "string",
          "example": "Ilorin, kwara state"
        },
        "image": {
          "type": "string",
          "example": "img.jpg"
        }
      }
    },
    "Owner": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string",
          "example": "John"
        },
        "lastName": {
          "type": "string",
          "example": "John"
        },
        "email": {
          "type": "string",
          "example": "test@gmail.com"
        },
        "phoneNumber": {
          "type": "string",
          "example": "+2349031874139"
        },
        "password": {
          "type": "string",
          "example": "2021"
        },
        "image": {
          "type": "string",
          "example": "img.jpg"
        }
      }
    },
    "Room": {
      "type": "object",
      "properties": {
        "roomType": {
          "type": "string",
          "example": "Kings"
        },
        "smokingPolicy": {
          "type": "string",
          "example": "Smoking"
        },
        "numberOfRooms": {
          "type": "number",
          "example": 16
        },
        "bedOptions": {
          "type": "object",
          "properties": {
            "bedKinds": {
              "type": "string",
              "example": "Twins Bed"
            },
            "bedNo": {
              "type": "number",
              "example": 3
            },
            "guestMax": {
              "type": "number",
              "example": 4
            },
            "roomSize": {
              "type": "number",
              "example": 39
            }
          }
        },
        "price": {
          "type": "number",
          "example": 13560
        }
      }
    },
    "Hotel": {
      "type": "object",
      "properties": {
        "hotelBasicInfo": {
          "type": "object",
          "properties": {
            "hotelName": {
              "type": "string",
              "example": "Kings Hotel and Suite"
            },
            "starRating": {
              "type": "string",
              "example": "2"
            },
            "contactName": {
              "type": "string",
              "example": "The Great Fichub Team"
            },
            "contactPhone": {
              "type": "string",
              "example": "09068658564"
            },
            "altPhone": {
              "type": "string",
              "example": "08046483946"
            },
            "ManyHotelOptions": {
              "type": "string",
              "example": "yes"
            },
            "streetAddress": {
              "type": "string",
              "example": "223, sango area"
            },
            "city": {
              "type": "string",
              "example": "saro"
            },
            "state": {
              "type": "string",
              "example": "osun state"
            },
            "country": {
              "type": "string",
              "example": "Nigeria"
            }
          }
        },
        "hotelFS": {
          "type": "object",
          "properties": {
            "parking": {
              "type": "string",
              "example": "Yes, Paid"
            },
            "breakfast": {
              "type": "string",
              "example": "no"
            },
            "staffLang": {
              "type": "string",
              "example": "English"
            },
            "facilitiesOption": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "option": {
                    "type": "string",
                    "example": "Garden"
                  }
                }
              }
            }
          }
        },
        "hotelAmenities": {
          "type": "object",
          "properties": {
            "extraBedOption": {
              "type": "string",
              "example": "no"
            },
            "amenitiesOption": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "option": {
                    "type": "string",
                    "example": "Fly"
                  }
                }
              }
            }
          }
        },
        "hotelPolicies": {
          "type": "object",
          "properties": {
            "checkInFrom": {
              "type": "string",
              "example": "12:ooam"
            },
            "checkInTo": {
              "type": "string",
              "example": "9:00am"
            },
            "checkOutFrom": {
              "type": "string",
              "example": "12:ooam"
            },
            "checkOutTo": {
              "type": "string",
              "example": "6:ooam"
            },
            "children": {
              "type": "string",
              "example": "yes"
            },
            "pet": {
              "type": "string",
              "example": "yes"
            }
          }
        },
        "hotelPayment": {
          "type": "object",
          "properties": {
            "cardPayment": {
              "type": "string",
              "example": "no"
            },
            "commissionPaymentName": {
              "type": "string",
              "example": "Ajala Dewunmi"
            }
          }
        },
        "photos": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "option": {
                "type": "string",
                "example": "two.jpg"
              }
            }
          }
        },
        "desc": {
          "type": "string",
          "example": "best hotel in with diverse features"
        },
        "rating": {
          "type": "number",
          "example": 5
        }
      }
    },
    "Booking": {
      "type": "object",
      "properties": {
        "hotelDetails": {
          "type": "object",
          "properties": {
            "hotelId": {
              "type": "string",
              "example": "63856ebfc92910673c8a412f"
            },
            "hotelCustomId": {
              "type": "string",
              "example": "AOW17519787"
            },
            "hotelName": {
              "type": "string",
              "example": "Grid Hotel"
            },
            "hotelAddress": {
              "type": "string",
              "example": "Amazona street, ikorodu lagos"
            }
          }
        },
        "roomDetails": {
          "type": "object",
          "properties": {
            "roomType": {
              "type": "string",
              "example": "Double Arena Room"
            },
            "noOfRooms": {
              "type": "number",
              "example": 2
            },
            "nightsNumber": {
              "type": "number",
              "example": 5
            },
            "checkIn": {
              "type": "string",
              "example": "25/11/2022"
            },
            "checkOut": {
              "type": "string",
              "example": "30/11/2022"
            },
            "guestCount": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "picked": {
                    "type": "string",
                    "example": "Children"
                  },
                  "amount": {
                    "type": "number",
                    "example": 5
                  }
                }
              }
            }
          }
        },
        "userDetails": {
          "type": "object",
          "properties": {
            "firstName": {
              "type": "string",
              "example": "John"
            },
            "lastName": {
              "type": "string",
              "example": "Tayo"
            },
            "phoneNumber": {
              "type": "string",
              "example": "09031874139"
            },
            "gender": {
              "type": "string",
              "example": "Male"
            },
            "address": {
              "type": "string",
              "example": "32, Toke street, ikorodu"
            }
          }
        },
        "price": {
          "type": "number",
          "example": 39000
        }
      }
    },
    "Kyc": {
      "type": "object",
      "properties": {
        "PropertyDetails": {
          "type": "object",
          "properties": {
            "fullNameOfTheAccommodation": {
              "type": "string",
              "example": "DKN suite"
            },
            "addressStreetName": {
              "type": "string",
              "example": "14, Shola street"
            },
            "zipCode": {
              "type": "string",
              "example": "3433"
            },
            "townCity": {
              "type": "string",
              "example": "ilorin"
            },
            "country": {
              "type": "string",
              "example": "Nigeria"
            }
          }
        },
        "ownerOfProperty": {
          "type": "object",
          "properties": {
            "propertyOwner": {
              "type": "string",
              "example": "businessEntity"
            },
            "businessEntity": {
              "type": "object",
              "properties": {
                "fullNameOfBusinessEntity": {
                  "type": "string",
                  "example": "GLK Suites"
                },
                "operationOfBusinessName": {
                  "type": "string",
                  "example": "GKL Limited"
                },
                "bnRc": {
                  "type": "string",
                  "example": "Gwej3j"
                },
                "addressOfBusinessEntity": {
                  "type": "string",
                  "example": "ikorodu road, lagos"
                },
                "unitNumberOfBusinessEntity": {
                  "type": "number",
                  "example": 243435
                },
                "cityOfBusinessEntity": {
                  "type": "string",
                  "example": "lagos"
                },
                "zipCodeOfBusinessEntity": {
                  "type": "number",
                  "example": 353513
                },
                "countryOfBusinessEntity": {
                  "type": "string",
                  "example": "Nigeria"
                },
                "firstNameOfBeneficialOwner": {
                  "type": "string",
                  "example": "John"
                },
                "lastNameOfBeneficialOwner": {
                  "type": "string",
                  "example": "Tayo"
                },
                "dobOfBeneficialOwner": {
                  "type": "string",
                  "example": "23-10-1984"
                }
              }
            }
          }
        },
        "managerOfProperty": {
          "type": "object",
          "properties": {
            "propertyManagerType": {
              "type": "string",
              "example": "managementCompany"
            },
            "ManagementCompany": {
              "type": "object",
              "properties": {
                "fullNameOfManagementCompany": {
                  "type": "string",
                  "example": "Splashray creations suite"
                },
                "addressOfManagementCompany": {
                  "type": "string",
                  "example": "splashray limited"
                },
                "unitNumberOfManagementCompany": {
                  "type": "number",
                  "example": 24235
                },
                "cityOfManagementCompany": {
                  "type": "string",
                  "example": "ikeja "
                },
                "zipCodeOfManagementCompany": {
                  "type": "number",
                  "example": 24124
                },
                "countryOfManagementCompany": {
                  "type": "string",
                  "example": "Nigeria"
                },
                "firstNameOfManagementCompany": {
                  "type": "string",
                  "example": "John"
                },
                "lastNameOfManagementCompany": {
                  "type": "string",
                  "example": "Tayo"
                },
                "dobOfManagementCompany": {
                  "type": "string",
                  "example": "20/10/2022"
                }
              }
            }
          }
        }
      }
    },
    "Review": {
      "type": "object",
      "properties": {
        "bookingid": {
          "type": "string",
          "example": "623fh2fhfwej33"
        },
        "user": {
          "type": "string",
          "example": "672dqqh3h24du12"
        },
        "email": {
          "type": "string",
          "example": "test@gmail.com"
        },
        "hotelId": {
          "type": "string",
          "example": "6920fh23hsj323"
        },
        "hotelName": {
          "type": "string",
          "example": "HMAS Hotel"
        },
        "hotelAddress": {
          "type": "string",
          "example": "ilorin, kwara state"
        },
        "image": {
          "type": "string",
          "example": "img.jpg"
        },
        "firstName": {
          "type": "string",
          "example": "John-doe"
        },
        "content": {
          "type": "string",
          "example": "Food are expensive"
        },
        "starRating": {
          "type": "number",
          "example": 4
        }
      }
    }
  }
}